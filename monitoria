#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 20 22:34:21 2017

@author: Agustin'tano' Mattioli
"""

import imaplib
import email
import getpass
from netmiko import ConnectHandler
from subprocess import call, check_output
import os.path
import sys
import os
from crontab import CronTab
# import re {Esta la tengo para mas adelante, es match de expresiones regulares}
from smtplib import SMTP_SSL as SMTP
from email.mime.text import MIMEText
import argparse


class connect(object):
    def __init__(self):
        self.user = '/home/'+getpass.getuser()+'/secrets'
        self.cron = '/home/'+getpass.getuser()+'/cron.tab'
        self.ordst = '/home/'+getpass.getuser()+'/ordst'
    
    def auth(self):
        if os.path.exists(self.user):
            secret = open(self.user,'r')
            creds = secret.readline().split(',')
            return creds
        else:
            secret = open(self.user,'a')
            print('Como es el primer uso vamos a tomar algunos datos...')
            new_user = input('Ingresa tu usuario: ')
            new_pass = input('Ingresa tu password: ')
            new_secret = input('Ingresa contrase√±a de enable: ', )
            mailuser = input('Correo electronico origen de las pruebas: ')
            maildst = input('Correo electronico destino de las pruebas: ')
            mailpass = input('Password del correo electronico: ')
            secret.write(new_user)
            secret.write(',')
            secret.write(new_pass)
            secret.write(',')
            secret.write(new_secret)
            secret.write(',')
            secret.write(mailuser)
            secret.write(',')
            secret.write(mailpass)
            secret.write(',')
            secret.write(maildst)
            call(["chmod", '400', self.user])
            secret = open(self.user,'r')
            creds = secret.readline().split(',')
            return creds
    
    def conn(self,origen,destino,source,pamount,opt):
        tab = CronTab(getpass.getuser())
        if usr.imap() == 'borrar':
            tab.remove_all(comment='Monitoria')
            tab.write()
            if os.path.exists(self.ordst):
                os.remove(self.ordst)
            if os.path.exists(self.cron):
                os.remove(self.cron)
            return 0
        paquetes = 0
        self.origen = origen
        self.destino = destino
        self.source = source
        self.pamount = pamount
        equipo = {
                  'device_type': 'cisco_ios',
                  'ip':origen,
                  'username': self.auth()[0],
                  'password': self.auth()[1],
                  'port' : 22,         
                  'secret': self.auth()[2],     
                  'verbose': False,
                  }
        net_connect = ConnectHandler(**equipo)
        net_connect.enable()
        for x in source.split():
            if x[0:2] == 'Gi' or x[0:2] == 'Fa' or x[0:2] == 'Po' or x[0:1] == 'g' or x[0:1] == 'f' :
                if opt == 1:
                    print('Corriendo ping en el equipo...')
                    output = net_connect.send_command('ping '+ destino + ' repeat ' + pamount + ' source ' + source)
                    for x in output.split()[24]:
                        if x == '!':
                            paquetes += 1
                        else:
                            paquetes -= 1
                    if paquetes < 0:
                        paquetes = 0
                        porc = 100
                    else:
                        porc = int((paquetes * 100) / int(pamount))
                
                elif opt == 2:
                    print('Corriendo trace en el equipo...')
                    output = net_connect.send_command('traceroute '+ destino + ' source ' + source)
                    o1 = output.split('\n')[3::]
                    print('\n'.join(o1))
                
            else:
                if opt == 1:
                    print('Corriendo ping en el equipo...')
                    output = net_connect.send_command('ping vrf '+ source + ' ' + destino + ' repeat ' + pamount)
                    for x in output.split()[16]:
                        if x == '!':
                            paquetes += 1
                        else:
                            paquetes -= 1
                    if paquetes < 0:
                        paquetes = 0  
                        porc = 100
                    else:
                        porc = int((paquetes * 100) / int(pamount))
                elif opt == 2:
                    print('Corriendo trace en el equipo...')
                    output = net_connect.send_command('traceroute vrf ' + source + ' ' + destino)
                    o1 = output.split('\n')[3::]
                    print('\n'.join(o1))
                

        if os.path.exists(self.cron):
            openlocalcron = open(self.cron, 'r')
            readcron = str(openlocalcron.readlines())
            defi = [x for x in readcron.split('/')]
            for x in defi:
                if x == "monitoria -p # Monitoria\\n']":
                    self.smtp(porc)
                    return 'Mail de monitoria enviado'
        else:
            if opt == 1:
                print('\n', 'recibidos', paquetes, 'de ', pamount)
                alarmas = input('Necesitas alarmas por mail? S/N: ')
                if alarmas == 'S' or alarmas == 's' :
                    tiempo = input('Ok, cada cuantos minutos?: ' )
                    loc = check_output('pwd').decode("utf-8")
                    ubicacion = loc
                    cron = tab.new(command= 'python3 ' + ubicacion.rstrip() + '/monitoria' + cr ,comment='Monitoria')
                    cron.minute.every(tiempo)
                    tab.write()
                    tab.write(self.cron)
                    self.smtp(porc)
                    print('Ok, las alarmas seran envidas a tu mail cada ' + tiempo + ' minutos. Podes cancelarlas contestando ack')
                    return 0
                else:
                    return 0
            else:
                return 0
    
    def imap(self):
        user = self.auth()[3]
        password = self.auth()[4]
        con=imaplib.IMAP4_SSL('imap.gmail.com')
        con.login(user,password)
        con.select("INBOX")

        result, data = con.search(None, "ALL")
        ids = data[0]
        id_list = ids.split()
        latest_email_id = id_list[-1] 

        result,data=con.fetch(latest_email_id, '(RFC822)')
        raw=email.message_from_bytes(data[0][1])

        if raw.is_multipart():
            x = [raw.get_payload(0)]         
            for part in x:
                if part.get_content_maintype() == 'text':
                    p = part.get_payload()[0:3]
                    if p == 'ACK' or p == 'Ack' or p == 'ack':
                        return 'borrar'

        else:
            return raw.get_payload(None, True)
                    
    def smtp(self, porcentaje):
        self.porcentaje = porcentaje 
        SMTPserver = 'smtp.gmail.com'
        sender =     self.auth()[3]
        destination = [self.auth()[5]]
        USERNAME = sender
        PASSWORD = self.auth()[4]
        text_subtype = 'plain'
        if porcentaje == 10:
            content= '0% de perdida'
        elif porcentaje > 10 and porcentaje < 30:
            content= 'Entre 10% y 25% de perdida'
        elif porcentaje > 30 and porcentaje < 60:
            content= 'Entre 25% y 60% de perdida'
        elif porcentaje > 60 and porcentaje < 90:
            content= 'Enlace completamente degradado'
        else:
            content= 'Enlace caido'
        subject="Prueba de Performance"
        try:
            msg = MIMEText(content, text_subtype)
            msg['Subject']=       subject
            msg['From']   = sender 
    
            conn = SMTP(SMTPserver)
            conn.set_debuglevel(False)
            conn.login(USERNAME, PASSWORD)
            try:
                conn.sendmail(sender, destination, msg.as_string())
            finally:
                conn.quit()

        except Exception as exc:
            sys.exit( "mail failed; %s" % str(exc) ) 




def nuevo(opt,origen,destino,source):
            usr = connect()
            ordst = '/home/'+getpass.getuser()+'/ordst'
            path = open(ordst,'w')
            if origen == None:
                origen = input('Equipo de Origen: ')
            if destino == None:    
                destino = input('IP de Destino: ')
            if opt == 1:
                pamount = input ('Cantidad de pings: ')
            equipo = {
                  'device_type': 'cisco_ios',
                  'ip':origen,
                  'username': usr.auth()[0],
                  'password': usr.auth()[1],
                  'port' : 22,         
                  'secret': usr.auth()[2],     
                  'verbose': False,
                      }
            path.write(origen)
            path.write(',')
            path.write(destino)
            path.write(',')
            if source == None:
                esvrf = input ('El origen de la prueba es una VRF? S/N: ')
                if esvrf == 'S' or esvrf == 's':
                            print('Buscando VRFs en el equipo...')
                            net_connect = ConnectHandler(**equipo)
                            net_connect.enable()
                            vlist = net_connect.send_command('show vrf')
                            print(vlist)
                            vrf = input('Cual? (introducir el nombre): ')
                            path.write(vrf)
                            path.write(',')
                            path.write(pamount)
                            path = open(ordst,'r')
                            conx = path.readline().split(',')
                            origen = conx[0]
                            destino = conx[1]
                            source = conx[2]
                            pamount = conx[3]
                else:
                    print('Buscando interfaces disponibles...')
                    net_connect = ConnectHandler(**equipo)
                    net_connect.enable()
                    interfaces = net_connect.send_command('show interface description')
                    print(interfaces)
                    source = input ('Interface de Origen: ')
                    path.write(source)
                    if opt == 1:
                        path.write(',')
                        path.write(pamount)
                    path = open(ordst,'r')
                    conx = path.readline().split(',')
                    origen = conx[0]
                    destino = conx[1]
                    source = conx[2]
            elif source != None:
                path.write(source)
            if opt == 1:
                path.write(',')
                path.write(pamount)
                path = open(ordst,'r')
                conx = path.readline().split(',')
                pamount = conx[3]
                usr.conn(origen,destino,source,pamount,opt)
                return
            elif opt == 2:
                usr.conn(origen,destino,source,None,opt)
                return


usr = connect()
ordst = '/home/'+getpass.getuser()+'/ordst'
cron = '/home/'+getpass.getuser()+'/cron.tab'

parser = argparse.ArgumentParser(description="Performance Monitoring Suite by Tano Mattioli")
parser.add_argument('-p', help="Ejecuta un ping en el equipo remoto", action='store_true')
parser.add_argument('-t', help="Ejecuta una traza en el equipo remoto", action='store_true')
parser.add_argument('-o', type=str, help="Equipo de origen", required=False)
parser.add_argument('-d', type=str, help="Equipo de destino", required=False)
parser.add_argument('-i', type=str, help="Interfaz de origen", required=False)



cmdargs = parser.parse_args()


while 1:
    
    if cmdargs.p or cmdargs.t:
        if cmdargs.p:
            opt = 1
            init = None
            cr = ' -p'
        elif cmdargs.t:
            opt = 2
            init = None
            cr = ' -t'
        if cmdargs.o:
            origen = cmdargs.o
            if not os.path.exists(cron):
                init = nuevo(opt,origen,None,None)
                break
        elif cmdargs.d:
            destino = cmdargs.d
            if not os.path.exists(cron):
                init = nuevo(opt,None,destino,None)
                break
        elif cmdargs.i:
            source = cmdargs.i
            if not os.path.exists(cron):
                init = nuevo(opt,None,None,source)
                break
        '''    
        NOTA:
            
        De momento esto queda comentado. No logro hacer que el parser tome mas de un parametro :(
        Queda como recordatorio molesto para verificarlo mas adelante.
        
        elif (cmdargs.p or cmdargs.t) and (cmdargs.o and cmdargs.d):
            print('yesh')
            origen = cmdargs.o
            destino = cmdargs.d
            init = nuevo(opt,origen,destino,None)
            cr = ' -o ' + origen + ' -d ' + destino
        elif cmdargs.o and cmdargs.i:
            origen = cmdargs.o
            source = cmdargs.i
            init = nuevo(opt,origen,None,source)
            cr = ' -o ' + origen + ' -s ' + source
        elif (cmdargs.p or cmdargs.t) and (cmdargs.d and cmdargs.i) or (cmdargs.i and cmdargs.d):
            destino = cmdargs.d
            source = cmdargs.i
            init = nuevo(opt,None,destino,source)
            cr = ' -d ' + destino + ' -i ' + source
        elif cmdargs.o and cmdargs.d and cmdargs.i:
            origen = cmdargs.o
            source = cmdargs.i
            destino = cmdargs.d
            init = nuevo(opt,origen,destino,source)
            cr = ' -o ' + origen + ' -d ' + destino + ' -s ' + source
        '''

        if os.path.exists(ordst):
            path = open(ordst,'r')
            conx = path.readline().split(',')
            if len(conx) == 4 and opt == 2:
                print('La ultima prueba fue un ping, vamos a remover el origen y destino')
                nuevo(2,None,None,None)
                break
            elif len(conx) == 3 and opt == 1:
                print('La ultima prueba fue una traza, vamos a remover el origen y destino')
                nuevo(1,None,None,None)
                break
            elif len(conx) <= 2:
                nuevo(opt,None,None,None)
            origen = conx[0]
            destino = conx[1]
            source = conx[2]
            if opt == 1:
                pamount = conx[3]
            equipo = {
                      'device_type': 'cisco_ios',
                      'ip':origen,
                      'username': usr.auth()[0],
                      'password': usr.auth()[1],
                      'port' : 22,         
                      'secret': usr.auth()[2],     
                      'verbose': False,
                      }

            if os.path.exists(cron) and opt == 1:
                usr.conn(origen,destino,source,pamount,opt)
                break
            else:
                if opt == 1:
                    print('\nEn la ultima prueba fueron: ' + pamount + ' paquetes desde ' + origen + ' contra: ' + destino + ' con origen ' + source + '\n')
                    mismo = input('mantener? S/N: ')
                    if mismo == 'S' or mismo == 's':
                        usr.conn(origen,destino,source,pamount,opt)
                        break
                    else:
                        if init:
                            init
                            break
                        nuevo(opt,None,None,None) 
                        break
                elif opt == 2:
                    print('\nLa ultima prueba fue una traza desde: ' + origen + ' contra: ' + destino + ' con origen ' + source + '\n')
                    mismo = input('mantener? S/N: ')
                    if mismo == 'S' or mismo == 's':
                        usr.conn(origen,destino,source,None,opt)
                        break
                    else:
                        if init:
                            init
                            break
                        nuevo(opt,None,None,None)
                        break
                else:
                    nuevo(opt,None,None,None)
                    break
        else:
            if init:
                init
                break
            nuevo(opt,None,None,None) 
            break
    else:
        print("\n" + "Error :( " + "\n" + "Las opciones -p (si es un ping) o -t (si es una traza) son mandatorias. RTFM --> './monitoria -h' :D " + "\n")
        break





    
